#!/bin/bash

# make sure that the language of the programs is English
export LANG=en_US

# abort the mission if an unhandled error occurs
# set -e

# check dependencies
readonly DEPENDENCIES=objdump

for dep in $DEPENDENCIES
do
	command -v "$dep" &>/dev/null
done

function print_usage()
{
	printf "usage: sysfind.sh [path_to_binary]\n"
}

# quit the program if no args are given
[ $# -ne 1 ] && print_usage && exit 1

# check if the file exists
[ ! -f "$1" ] && echo "cannot open file $1" && exit 1
bin_path="$1"

# figure out some information about the binary
bin_arch="$(objdump -x "$bin_path" | awk '/file format/ {print $NF}')"
has_symbols="$(objdump -x "$bin_path" | grep -q "no symbols" && echo "no" || echo "yes")"

echo -e "Arch:\t\t$bin_arch"
echo -e "Symbols:\t$has_symbols"

# if the binary has symbols included, its probably not necessary to disassemble
if [ "$has_symbols" == "yes" ]
then
	read -rp "The binary contains symbols. Do you want to proceed anyway? (y/N): " cancel_search
	case $cancel_search in
		[Yy]|[Yy][Ee][Ss]) ;;
		*) exit 0 ;;
	esac
fi

# configure the disassembly part based on the information gathered earlier
case "$bin_arch" in
	elf64-x86-64)
		syscall_instruction_regex="syscall"
		syscall_header_name="unistd_64.h"
		;;

	elf32-i386)
		syscall_instruction_regex="int[[:space:]]*0x80"
		syscall_header_name="unistd_32.h"
		;;

	*)
		echo "$bin_arch is not a supported binary type"
		exit 1
		;;
esac

# locate the correct syscall header
syscall_header="$(find /usr/include -iname "$syscall_header_name" | head -n1)"
[ -z "$syscall_header" ] && echo "Can't find the syscall header for the $bin_arch architecture" && exit 1

# parse the syscall list into a usable format
linux_syscalls="$(awk '{print $3 " " $2}' "$syscall_header" | sed 's/__NR_//')"

# disassemble the binary with objdump
echo "disassembling..."
disasm=$(objdump -d -M intel --no-show-raw-insn "$bin_path")

# find all syscalls and carve out their addresses
syscalls="$(echo "$disasm" | grep "$syscall_instruction_regex" | awk '{print $1}' | tr -d ':')"
echo "found $(echo "$syscalls" | wc -l) syscalls"

# cancel processing if no syscalls were found
[ -z "$syscalls" ] && exit 0

# analyze the binary with radare2 to find the addresses of functions in the binary
function_addresses="$(r2 -q -A -c afl "$bin_path" | awk '{print $1}' | sed 's/0x0*/0x/; s/^.*0x/0x/')"

IFS="$(echo -e "\n\b")"
syscall_count="$(echo "$syscalls" | wc -l)"
progress_counter=1

echo "processing syscalls..."
for syscall in $syscalls
do
	echo -ne "\rprogress: $progress_counter/$syscall_count"
	progress_counter=$((progress_counter+1))

	# cut out everything after the syscall
	# and remove the memory addresses and comments from the disassembly
	trimmed_disasm="$(echo "$disasm" | sed "/$syscall/,\$d; s/^.*:[[:space:]]*//; s/[[:space:]]*#.*//")"

	# reverse the order so that we can iterate through the disassembly
	# in reverse with a regular for-loop
	reversed_trimmed_disasm="$(echo "$trimmed_disasm" | tac)"

	# look for a mov instruction
	# if should be fine to look for both rax and eax registers here, since 32bit
	# applications wont use the rax register but a 64bit applicatio might use both
	mov_instruction="$(echo "$reversed_trimmed_disasm" | grep -E "mov[[:space:]]*(rax|eax)" | head -n1)"
	instruction_args="$(echo "$mov_instruction" | awk '{print $2}')"
	value="$(echo "$instruction_args" | cut -d ',' -f2)"

	# skip the syscall if we can't determine it from the nearest eax/rax register alone
	# (i.e. ignore non-hex values)
	echo "$value" | grep -q "0x[0-9]*" || continue

	# convert the value into decimal
	value_dec="$(printf "%d" "$value")"

	# figure out the name of the syscall
	syscall_name="$(echo "$linux_syscalls" | grep "^$value_dec " | cut -d ' ' -f2)"

	# if no results could be found, move on
	[ -z "$syscall_name" ] && continue

	# find the closest function to the syscall by appending the syscall
	# address into the function address list, sorting the list and then picking
	# the address that is before the syscall address
	closest_function="$(echo -e "$function_addresses\n0x$syscall" | sort | grep -B1 "0x$syscall" | head -n1)"

	# print the result
	echo -e "\r0x$syscall @ $closest_function -> $syscall_name"
done

# print a newline char so that the progress counter doesn't get printed
# on the same line as the next thing
printf "\n"
